const
    ion = import 'ion'
    estraverse = import 'estraverse'

export (ast) ->
    let result = ast
    for step in passes
        result = estraverse.replace(
            result
            {}
                enter: (node) -> step[node.type]?.enter?(node)
                leave: (node) -> step[node.type]?.leave?(node)
        )
    return result

const
    # Sometimes esprima represents the index to an object in a MemberExpression or Property as an Identifier. 
    # This is semantically awkward, since it's used as a Literal when 
    identifierToLiteral(node) ->
        return {}
            type: 'Literal'
            value: node.name
            loc: node.loc

    # This allows us to handle assignments of the form a = b, a.b = c, a++, a.b++ uniformly.
    identifierToMemberExpression(node) ->
        return {}
            type: 'MemberExpression'
            object: {}
                jstepType: 'ScopeLookup'
                name: node.name
            property: {}
                type: 'Literal'
                value: node.name
            loc: node.loc
    
    addFunctionsToStaticScope(node) ->
        node.static = {}
        for let i = 0; i < node.body.length; i++
            let child = node.body[i]
            if child.type is 'FunctionDeclaration'
                node.body.splice(i, 1)
                node.static[child.id.name] = child

const passes = []
    {}
        Program:
            leave: (node) ->
                return ion.clone(node)
                    type: 'BlockStatement'
        
        WhileStatement:
            leave: (node) ->
                return ion.clone(node)
                    type: 'ForStatement'
                    init: null
                    update: null

        # The Identifier on the right side of a MemberExpression isn't actually used as an Identifier, but as a Literal index to an object.
        MemberExpression:
            leave: (node) ->
                if node.property.type is 'Identifier'
                    let clone = ion.clone(node)
                    clone.property = identifierToLiteral(node.property)
                    return clone

        # The Identifier on the left side of a Property isn't actually used as an Identifier, but as a Literal index to an object.    
        Property:
            leave: (node) ->
                if node.key.type is 'Identifier'
                    let clone = ion.clone(node)
                    clone.key = identifierToLiteral(node.key)         
                    return clone

        AssignmentExpression:
            leave: (node) ->
                if node.left.type is 'Identifier'
                    let clone = ion.clone(node)
                    clone.left = identifierToMemberExpression(node.left)
                    return clone
            
        UpdateExpression:
            leave: (node) ->
                if node.argument.type is 'Identifier'
                    let clone = ion.clone(node)
                    clone.argument = identifierToMemberExpression(node.argument)
                    return clone
    {}
        BlockStatement:
            leave: addFunctionsToStaticScope