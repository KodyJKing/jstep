const
    esprima = import 'esprima'
    preprocessor = import './preprocessor' 

export class Runtime

    constructor: (options) ->
        @source = options.source
        @ast = esprima.parse(@source, options.esprima)
        @ast = preprocessor(@ast)
        # console.dir(@ast, {depth: null})
        # console.log()
        @stack = []
        if options.globals?
            @stack.push(options.globals)      
        @nodes = []
        @states = []
        @returnsValues = [[]]
        @returnNames = [undefined]
        @enter(@ast)

    typeOf: (node) ->
        return Runtime.NodeTypes[node?.jstepType ? node?.type]

    properties:

        running: -> @nodes.length > 0
        node:
            get: -> @nodes[@nodes.length - 1]
        type:
            get: -> Runtime.typeOf(@node)
        acceptReturns:
            get: -> @type?.acceptReturns isnt false

        lookup: (name) ->
            for let i = @stack.length - 1; i >= 0; i--
                if (@stack[i].hasOwnProperty(name))
                    return @stack[i]
        getVar: (name) -> 
            let frame = @lookup(name)
            if frame?
                return frame[name]
        setVar: (name, value) ->
            let frame = @lookup(name)
            if frame?
                frame[name] = value
        declare: (name, value) ->
            @stack[@stack.length - 1][name] = value

        pushStack: (value) -> @stack.push(value)
        popStack: -> @stack.pop()
        localScope:
            get: -> @stack[@stack.length - 1]

        pushState: (value) -> @states.push(value)
        popState: -> @states.pop()

        state:
            get: -> @states[@states.length - 1]
            set: (value) -> @states[@states.length - 1] = value

        returns:
            get: -> @returnsValues[@returnsValues.length - 1]

        returned:
            get: ->
                let returns = @returns
                return returns[returns.length - 1]
        
        returnName:
            get: -> @returnNames[@returnNames.length - 1]
            set: (value) -> @returnNames[@returnNames.length - 1] = value

        checkSupport: (node) ->
            if (not Runtime.typeOf(node)?)
                throw new Error('Unsupported node: ' + JSON.stringify(node, null, 4))
        
        enter: (node, returnName) ->
            @checkSupport(node)
            @nodes.push(node)
            if @acceptReturns
                @returnsValues.push([])
                @returnNames.push(returnName)
            Runtime.typeOf(node).enter?.bind(@)(node)

        step: () -> @type.step?.bind(@)(@node)

        leave: (value) ->
            if @acceptReturns
                @returnsValues.pop()
            let node = @nodes.pop()
            if @acceptReturns
                if @returnName?
                    @returns[@returnName] = value
                else
                    @returns.push(value)
            @returnNames.pop()
            Runtime.typeOf(node).leave?.bind(@)(node)

    NodeTypes:

        BlockStatement:
            acceptReturns: false
            enter: (node) -> 
                @pushState(0)
                @pushStack(node.static ? {})
            step: (node) ->
                let index = @state
                if index < node.body.length
                    @state = index + 1
                    @enter(node.body[index])
                else
                    return @leave()
            leave: -> 
                @popState()
                @popStack()                

        CallExpression:
            enter: -> @pushState('calling')
            step: (node) ->
                if @state is 'calling'
                    let returns = @returns
                    let index = returns.length
                    let argNum = node.arguments.length      
                    if index < argNum
                        @enter(node.arguments[index])
                    else if index is argNum
                        @enter(node.callee)
                    else
                        let func = returns.pop()
                        if typeof func is 'function' # non interpreted function, we can bail out right now
                            @leave(func.apply(null, returns))
                        else
                            @state = 'called'
                            @enter(func.body)
                            let callScope = @localScope
                            for let i = 0; i < node.arguments.length; i++
                                if not func.params[i]?
                                    break
                                callScope[func.params[i].name] = returns[i]
                else
                    @leave(@returned)
            leave: -> @popState()

        ForStatement:
            enter: -> @pushState('init')
            step: (node) ->
                let state = @state

                if state is 'init'
                    @state = 'test'
                    if node.init?
                        return @enter(node.init)

                if state is 'update'
                    @state = 'test'
                    if node.update?
                        return @enter(node.update)

                if state is 'test'
                    @state = 'run'
                    return @enter(node.test)
                else if state is 'run'
                    @state = 'update'
                    if not @returned
                        return @leave()
                    else
                        @enter(node.body)
            leave: -> @popState()

        IfStatement:
            step: (node) ->
                let returns = @returns
                if not returns.test?
                    @enter(node.test, 'test')
                else
                    if returns.length >= 1
                        @leave()
                    else if returns.test
                        @enter(node.consequent)
                    else if node.alternate?
                        @enter(node.alternate)
                    else
                        @leave()
        
        MemberExpression:
            step: (node) ->
                let returns = @returns
                let count = @returns.length
                if not returns.object
                    @enter(node.object, 'object')
                else if not returns.property
                    @enter(node.property, 'property')
                else
                    @leave(returns.object[returns.property])

        ArrayExpression:
            step: (node) ->
                let returns = @returns
                let count = returns.length
                if count < node.elements.length
                    @enter(node.elements[count])
                else
                    @leave(returns)

        ObjectExpression:
            step: (node) ->
                let returns = @returns
                let count = returns.length
                if count < node.properties.length
                    @enter(node.properties[count])
                else
                    let result = {}
                    for let i = 0; i < count; i++
                        result[returns[i].key] = returns[i].value
                    @leave(result)

        Property:
            step: (node) ->
                let returns = @returns
                if not returns.value?
                    @enter(node.value, 'value')
                else if not returns.key?
                    @enter(node.key, 'key')
                else
                    @leave(returns)

        VariableDeclaration:
            acceptReturns: false
            enter: -> @pushState(0)      
            step: (node) ->
                let index = @state
                @state = index + 1
                if index < node.declarations.length
                    @enter(node.declarations[index])
                else
                    @leave()
            leave: -> @popState()

        VariableDeclarator:
            step: (node) ->
                let returns = @returns
                if not returns.init?
                    @enter(node.init, 'init')
                else
                    @declare(node.id.name, returns.init)
                    @leave()

        
        BinaryExpression:
            step: (node) ->
                let returns = @returns
                if not returns.left?
                    @enter(node.left, 'left')
                else if not returns.right?
                    @enter(node.right, 'right')
                else
                    @leave(Runtime.NodeTypes.BinaryExpression[node.operator](returns.left, returns.right))
            
            '+': (x, y) -> x + y
            '-': (x, y) -> x - y
            '*': (x, y) -> x * y
            '/': (x, y) -> x / y
            '%': (x, y) -> x % y
            '**': (x, y) -> Math.pow(x, y)
            '<<': (x, y) -> x << y
            '>>': (x, y) -> x >> y
            '>>>': (x, y) -> x >>> y
            '&': (x, y) -> x & y
            '^': (x, y) -> x ^ y
            '|': (x, y) -> x | y
            '<': (x, y) -> x < y
            '>': (x, y) -> x > y
            '>=': (x, y) -> x >= y
            '<=': (x, y) -> x <= y
            '==': (x, y) -> x is y

        UpdateExpression:
            step: (node) ->
                let returns = @returns
                if not returns.object
                    @enter(node.argument.object, 'object')
                else if not returns.property
                    @enter(node.argument.property, 'property')
                else                    
                    let before = returns.object[returns.property]
                    let after = Runtime.NodeTypes.UpdateExpression[node.operator](before)
                    returns.object[returns.property] = after
                    @leave(node.prefix ? after : before)
            
            '++': (lval) -> lval + 1
            '--': (lval) -> lval - 1

        AssignmentExpression:
            step: (node) ->
                let returns = @returns
                if not returns.rval?
                    @enter(node.right, 'rval')
                else if not returns.object?
                    @enter(node.left.object, 'object')
                else if not returns.lval?
                    @enter(node.left.property, 'lval')
                else
                    let before = returns.object[returns.lval]
                    let after = Runtime.NodeTypes.AssignmentExpression[node.operator](before, returns.rval)
                    returns.object[returns.lval] = after
                    @leave()
            
            '=': (lval, rval) -> rval
            '+=': (lval, rval) -> lval + rval
            '-=': (lval, rval) -> lval - rval
            '*=': (lval, rval) -> lval * rval
            '/=': (lval, rval) -> lval / rval
            '%=': (lval, rval) -> lval % rval
            '**=': (lval, rval) -> Math.pow(lval, rval)
            '<<=': (lval, rval) -> lval << rval
            '>>=': (lval, rval) -> lval >> rval
            '>>>=': (lval, rval) -> lval >>> rval
            '&=': (lval, rval) -> lval & rval
            '^=': (lval, rval) -> lval ^ rval
            '|=': (lval, rval) -> lval | rval

        ScopeLookup:
            enter: (node) -> @leave(@lookup(node.name))

        ExpressionStatement:
            enter: (node) -> @enter(node.expression)
            step: -> @leave(@returned)

        Identifier:
            enter: (node) -> @leave(@getVar(node.name))

        Literal:
            enter: (node) -> @leave(node.value)    
    
    test: () ->

        let runtime = new Runtime(
            globals: global
            source: ""
                if (true) {
                    function foo(a, b) { 
                        console.log(a)
                        console.log(b)
                        if ( a == 'foo')
                            foo('bar', 'qux')
                    }
                    foo('foo', 'bar')
                }
        )

        while runtime.running()
            runtime.step()